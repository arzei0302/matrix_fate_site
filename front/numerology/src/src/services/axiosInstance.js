import axios from "axios";

const BASE_URL = "https://numerology-calculator.fi/api";

const api = axios.create({
  baseURL: BASE_URL,
});

// üëâ –î–æ–±–∞–≤–ª—è–µ–º access token –≤ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
api.interceptors.request.use((config) => {
  const token = localStorage.getItem("accessToken");
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// üëâ –û–±–Ω–æ–≤–ª—è–µ–º access token –ø—Ä–∏ 401 Unauthorized
api.interceptors.response.use(
    response => response,
    async (error) => {
      const originalRequest = error.config;

      // –ï—Å–ª–∏ access token –∏—Å—Ç—ë–∫, –∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ–≤—Ç–æ—Ä
      if (error.response?.status === 401 && !originalRequest._retry) {
        originalRequest._retry = true;

        const refreshToken = localStorage.getItem("refreshToken");
        if (!refreshToken) {
          return Promise.reject(error);
        }

        try {
          const res = await axios.post(`${BASE_URL}/matrix_auth/token/refresh/`, {
            refresh: refreshToken,
          });

          const newAccessToken = res.data.access;
          localStorage.setItem("accessToken", newAccessToken);

          // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
          originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;
          return api(originalRequest); // –ø–æ–≤—Ç–æ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        } catch (refreshError) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", refreshError);
          localStorage.removeItem("accessToken");
          localStorage.removeItem("refreshToken");
          return Promise.reject(refreshError);
        }
      }

      return Promise.reject(error);
    }
);

export default api;
